TDA Assembler documentation. 

for Ternary Demo Arch Mark 1.1 Assembler v1.1.0


command line usage:
on unix like systems:
e.g.
./TDA-asm.py ./tdaasmsourcefile.tasm


note: while TDA-asm does make programming for TDA mark 1.1 easier
a basic understanding of both how conventional computers work, 
and balanced ternary mathematics, is still needed.

comments:
comments can be acheved as such:
"#comment"

Multiline text blocks:

	start command:
	"textstart"
	
	end command:
	"textstop"
basic commands:

These corrispond to TDA Mk1 Opcodes:
any data specified should be specified  as such:
'null|xxxxxx'
-where x is a balanced ternary digit
-Mark 1.1 uses 6-trit data. so does the assembler.
-note the vertical bar "|"
-note omitting the vertical bar and data will cause the data to default to ground. (000000)

"romread1"
----
ROMread 1
(first register)

"romread2"
---0
ROMread 2
(second register)

"IOread1"
---+
IOread  1
(first register)

"IOread2"
--0-
IOread  2
(second register)

"IOwrite1"
--00
IOwrite 1
(first register)

"IOwrite2"
--0+
IOwrite 2
(second register)

"regswap"
--+-
swap primary registers

"copy1to2"
--+0
copy register 1 to 2

"copy2to1"
--++
copy register 2 to 1

"invert1"
-0--
invert register 1

"invert2"
-0-0
invert register 2

"add"
-0-+
add

"subtract"
-00-
subtract

"multiply"
-000
multiply

"divide"
-00+
rounded devide

"setreg1"
-0+-
set register 1

"setreg2"
-0+0
set register 2

"setinst"
-0++
set instruction of rom address DATA using register 1 [IIII??]

"setdata"
-+--
set data of rom address DATA using register 1 [DDDDDD]

>>>basic color display commands<<<

"colorpixel"
0---
COLORDISP draw pixel using DRAWCOLOR using data XXXYYY
((Tip: draw same color pixels together between color changes)

"setcolorreg"
0--0
SET DRAWCOLOR using data CCCCCC where C is a 6-trit RGB color :D

"colorfill"
0--+
fill COLORDISP using data CCCCCC where C is a 6-trit RGB color :D

"setcolorvect"
0-0-
set colordisp vector register
(for filled rectangle and line instructions) XXXYYY

"colorline"
0-00
draw color line XXXYYY

"colorrect"
0-0+
draw color filled rectangle XXXYYY

>>>basic Mono Display commands<<<


"monopixel"
0-+-
MONODISP draw pixel dusing data XXYYMM
where M=is a 2 trit monochrome value

"monofill"
0-+0
fill COLORDISP using data ????MM
where M=is a 2 trit monochrome value

"setmonovect"
0-++
set monodisp vector register 
(for filled rectangle and line instructions XXYY??

"monoline"
00--
draw line  XXYYMM
where MM is a 2 trit greyscale color value.

"monorect"
00-0
draw filled rectangle XXYYMM
where MM is a 2 trit greyscale color value.

>>>end basic display commands<<<


"stop"
000-
stop (shuts down VM)

"null"
0000
null command

"gotodata"
000+
goto data specified ROM adress

"gotoreg1"
00+-
goto reg1 specified ROM adress

"gotodataif"
00+0
goto data specified ROM adress IF REG 1 & 2 ARE EQUAL

"wait"
00++
wait 0.1, 0.2, or 0.3
(xxxxx+ = 3 xxxxx0= 2 xxxxx- = 1)

"YNgoto"
0+--
YN user goto. asks user to confirm goto.
(best used with a label)

"userwait"
0+-0
user wait.

"TTYclear"
0+-+
TTY clear

>>>Rom switching GOTOs<<<

(the following gotos switch TROMS! make sure config setup is done properly!

"gotoA
+---
A manditory goto  

"gotoAif"
+--0
A reg equal goto

"gotoB"
+--+
B manditory goto

"gotoBif"
+-0-
B reg equal goto

"gotoC"
+-00
C manditory goto

"gotoCif"
+-0+
C reg equal goto

"gotoD"
+-+-
D manditory goto

"gotoDif"
+-+0
D reg equal goto

"gotoE"
+-++
E manditory goto

"gotoEif"
+0--
E reg equal goto

"gotoF"
+0-0
F manditory goto

"gotoFif"
+0-+
F reg equal goto

>>>end Rom switching GOTOs<<<

"dumpreg1"
++0+
dump register 1 to TTY

"dumpreg2"
+++-
dump register 2 to TTY

"TTYwrite"
+++0
tty write port (direct)

"buzzer"
++++
buzzer port (direct)
TFFFFF where T is time and FFFFF is frequency code